import{r as s,o as g}from"./index-CvJuAqlI.js";function d(r,e){return`${r} returned \`undefined\`. Seems you forgot to wrap component within ${e}`}function w(r={}){const{name:e,strict:n=!0,hookName:t="useContext",providerName:c="Provider",errorMessage:a,defaultValue:f}=r,o=s.createContext(f);o.displayName=e;function i(){const l=s.useContext(o);if(!l&&n){const u=new Error(a??d(t,c));throw u.name="ContextError",Error.captureStackTrace?.(u,i),u}return l}return[o.Provider,i,o]}function h(...r){return e=>{const n=[];for(const t of r)if(typeof t=="function"){const c=t(e);typeof c=="function"&&n.push(c)}else t&&(t.current=e);if(n.length)return()=>{for(const t of n)t()}}}function m(r){let e=Object.getOwnPropertyDescriptor(r.props,"ref")?.get,n=e&&"isReactWarning"in e&&e.isReactWarning;return n?r.ref:(e=Object.getOwnPropertyDescriptor(r,"ref")?.get,n=e&&"isReactWarning"in e&&e.isReactWarning,n?r.props.ref:r.props.ref||r.ref)}const p=r=>{const e=s.memo(s.forwardRef((n,t)=>{const{asChild:c,children:a,...f}=n;if(!c)return s.createElement(r,{...f,ref:t},a);if(!s.isValidElement(a))return null;const o=s.Children.only(a),i=m(o);return s.cloneElement(o,{...g(f,o.props),ref:t?h(t,i):i})}));return e.displayName=r.displayName||r.name,e},y=()=>{const r=new Map;return new Proxy(p,{apply(e,n,t){return p(t[0])},get(e,n){const t=n;return r.has(t)||r.set(t,p(t)),r.get(t)}})},C=y();export{C as a,h as b,w as c};
